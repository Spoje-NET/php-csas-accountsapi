<?php

declare(strict_types=1);

/**
 * This file is part of the CSasWebApi package
 *
 * https://github.com/Spoje-NET/php-csas-webapi
 *
 * (c) SpojeNetIT <http://spoje.net/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Production Accounts API V3.
 *
 * API for managing production accounts.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vitezslav.dvorak@spojenet.cz
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpojeNet\CSas\Model;

use SpojeNet\CSas\ObjectSerializer;

/**
 * GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetails Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 *
 * @no-named-arguments
 */
class GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetails implements \ArrayAccess, \JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'getTransactions_200_response_transactions_inner_entryDetails_transactionDetails';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'references' => '\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsReferences',
        'amountDetails' => '\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsAmountDetails',
        'relatedParties' => '\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsRelatedParties',
        'relatedAgents' => '\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsRelatedAgents',
        'remittanceInformation' => '\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsRemittanceInformation',
        'additionalTransactionInformation' => 'string',
        'additionalRemittanceInformation' => 'string',
        'additionalTransactionDescription' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'references' => null,
        'amountDetails' => null,
        'relatedParties' => null,
        'relatedAgents' => null,
        'remittanceInformation' => null,
        'additionalTransactionInformation' => null,
        'additionalRemittanceInformation' => null,
        'additionalTransactionDescription' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'references' => false,
        'amountDetails' => false,
        'relatedParties' => false,
        'relatedAgents' => false,
        'remittanceInformation' => false,
        'additionalTransactionInformation' => false,
        'additionalRemittanceInformation' => false,
        'additionalTransactionDescription' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'references' => 'references',
        'amountDetails' => 'amountDetails',
        'relatedParties' => 'relatedParties',
        'relatedAgents' => 'relatedAgents',
        'remittanceInformation' => 'remittanceInformation',
        'additionalTransactionInformation' => 'additionalTransactionInformation',
        'additionalRemittanceInformation' => 'additionalRemittanceInformation',
        'additionalTransactionDescription' => 'additionalTransactionDescription',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'references' => 'setReferences',
        'amountDetails' => 'setAmountDetails',
        'relatedParties' => 'setRelatedParties',
        'relatedAgents' => 'setRelatedAgents',
        'remittanceInformation' => 'setRemittanceInformation',
        'additionalTransactionInformation' => 'setAdditionalTransactionInformation',
        'additionalRemittanceInformation' => 'setAdditionalRemittanceInformation',
        'additionalTransactionDescription' => 'setAdditionalTransactionDescription',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'references' => 'getReferences',
        'amountDetails' => 'getAmountDetails',
        'relatedParties' => 'getRelatedParties',
        'relatedAgents' => 'getRelatedAgents',
        'remittanceInformation' => 'getRemittanceInformation',
        'additionalTransactionInformation' => 'getAdditionalTransactionInformation',
        'additionalRemittanceInformation' => 'getAdditionalRemittanceInformation',
        'additionalTransactionDescription' => 'getAdditionalTransactionDescription',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('references', $data ?? [], null);
        $this->setIfExists('amountDetails', $data ?? [], null);
        $this->setIfExists('relatedParties', $data ?? [], null);
        $this->setIfExists('relatedAgents', $data ?? [], null);
        $this->setIfExists('remittanceInformation', $data ?? [], null);
        $this->setIfExists('additionalTransactionInformation', $data ?? [], null);
        $this->setIfExists('additionalRemittanceInformation', $data ?? [], null);
        $this->setIfExists('additionalTransactionDescription', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            \JSON_PRETTY_PRINT,
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return \in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets references.
     *
     * @return null|\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsReferences
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references.
     *
     * @param null|\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsReferences $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        if (null === $references) {
            throw new \InvalidArgumentException('non-nullable references cannot be null');
        }

        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets amountDetails.
     *
     * @return null|\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsAmountDetails
     */
    public function getAmountDetails()
    {
        return $this->container['amountDetails'];
    }

    /**
     * Sets amountDetails.
     *
     * @param null|\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsAmountDetails $amountDetails amountDetails
     *
     * @return self
     */
    public function setAmountDetails($amountDetails)
    {
        if (null === $amountDetails) {
            throw new \InvalidArgumentException('non-nullable amountDetails cannot be null');
        }

        $this->container['amountDetails'] = $amountDetails;

        return $this;
    }

    /**
     * Gets relatedParties.
     *
     * @return null|\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsRelatedParties
     */
    public function getRelatedParties()
    {
        return $this->container['relatedParties'];
    }

    /**
     * Sets relatedParties.
     *
     * @param null|\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsRelatedParties $relatedParties relatedParties
     *
     * @return self
     */
    public function setRelatedParties($relatedParties)
    {
        if (null === $relatedParties) {
            throw new \InvalidArgumentException('non-nullable relatedParties cannot be null');
        }

        $this->container['relatedParties'] = $relatedParties;

        return $this;
    }

    /**
     * Gets relatedAgents.
     *
     * @return null|\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsRelatedAgents
     */
    public function getRelatedAgents()
    {
        return $this->container['relatedAgents'];
    }

    /**
     * Sets relatedAgents.
     *
     * @param null|\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsRelatedAgents $relatedAgents relatedAgents
     *
     * @return self
     */
    public function setRelatedAgents($relatedAgents)
    {
        if (null === $relatedAgents) {
            throw new \InvalidArgumentException('non-nullable relatedAgents cannot be null');
        }

        $this->container['relatedAgents'] = $relatedAgents;

        return $this;
    }

    /**
     * Gets remittanceInformation.
     *
     * @return null|\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsRemittanceInformation
     */
    public function getRemittanceInformation()
    {
        return $this->container['remittanceInformation'];
    }

    /**
     * Sets remittanceInformation.
     *
     * @param null|\SpojeNet\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetailsTransactionDetailsRemittanceInformation $remittanceInformation remittanceInformation
     *
     * @return self
     */
    public function setRemittanceInformation($remittanceInformation)
    {
        if (null === $remittanceInformation) {
            throw new \InvalidArgumentException('non-nullable remittanceInformation cannot be null');
        }

        $this->container['remittanceInformation'] = $remittanceInformation;

        return $this;
    }

    /**
     * Gets additionalTransactionInformation.
     *
     * @return null|string
     */
    public function getAdditionalTransactionInformation()
    {
        return $this->container['additionalTransactionInformation'];
    }

    /**
     * Sets additionalTransactionInformation.
     *
     * @param null|string $additionalTransactionInformation Additional information about the transaction
     *
     * @return self
     */
    public function setAdditionalTransactionInformation($additionalTransactionInformation)
    {
        if (null === $additionalTransactionInformation) {
            throw new \InvalidArgumentException('non-nullable additionalTransactionInformation cannot be null');
        }

        $this->container['additionalTransactionInformation'] = $additionalTransactionInformation;

        return $this;
    }

    /**
     * Gets additionalRemittanceInformation.
     *
     * @return null|string
     */
    public function getAdditionalRemittanceInformation()
    {
        return $this->container['additionalRemittanceInformation'];
    }

    /**
     * Sets additionalRemittanceInformation.
     *
     * @param null|string $additionalRemittanceInformation Additional remittance information
     *
     * @return self
     */
    public function setAdditionalRemittanceInformation($additionalRemittanceInformation)
    {
        if (null === $additionalRemittanceInformation) {
            throw new \InvalidArgumentException('non-nullable additionalRemittanceInformation cannot be null');
        }

        $this->container['additionalRemittanceInformation'] = $additionalRemittanceInformation;

        return $this;
    }

    /**
     * Gets additionalTransactionDescription.
     *
     * @return null|string
     */
    public function getAdditionalTransactionDescription()
    {
        return $this->container['additionalTransactionDescription'];
    }

    /**
     * Sets additionalTransactionDescription.
     *
     * @param null|string $additionalTransactionDescription Additional transaction description
     *
     * @return self
     */
    public function setAdditionalTransactionDescription($additionalTransactionDescription)
    {
        if (null === $additionalTransactionDescription) {
            throw new \InvalidArgumentException('non-nullable additionalTransactionDescription cannot be null');
        }

        $this->container['additionalTransactionDescription'] = $additionalTransactionDescription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && \array_key_exists($variableName, $fields) && null === $fields[$variableName]) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
