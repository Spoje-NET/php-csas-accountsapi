<?php

/**
 * Account
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpojeNET\CSas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Production Accounts API V3
 *
 * API for managing production accounts.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vitezslav.dvorak@spojenet.cz
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpojeNET\CSas\Model;

use \ArrayAccess;
use \SpojeNET\CSas\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  SpojeNET\CSas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Account implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'identification' => '\SpojeNET\CSas\Model\AccountIdentification',
        'currency' => 'string',
        'servicer' => '\SpojeNET\CSas\Model\AccountServicer',
        'nameI18N' => 'string',
        'productI18N' => 'string',
        'ownersNames' => 'string[]',
        'relationship' => '\SpojeNET\CSas\Model\AccountRelationship',
        'suitableScope' => '\SpojeNET\CSas\Model\AccountSuitableScope',
        'status' => 'string',
        'relatedAgents' => '\SpojeNET\CSas\Model\AccountRelatedAgents',
        'currencyExchange' => '\SpojeNET\CSas\Model\AccountCurrencyExchange'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'identification' => null,
        'currency' => null,
        'servicer' => null,
        'nameI18N' => null,
        'productI18N' => null,
        'ownersNames' => null,
        'relationship' => null,
        'suitableScope' => null,
        'status' => null,
        'relatedAgents' => null,
        'currencyExchange' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'identification' => false,
        'currency' => false,
        'servicer' => false,
        'nameI18N' => false,
        'productI18N' => false,
        'ownersNames' => false,
        'relationship' => false,
        'suitableScope' => false,
        'status' => false,
        'relatedAgents' => false,
        'currencyExchange' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identification' => 'identification',
        'currency' => 'currency',
        'servicer' => 'servicer',
        'nameI18N' => 'nameI18N',
        'productI18N' => 'productI18N',
        'ownersNames' => 'ownersNames',
        'relationship' => 'relationship',
        'suitableScope' => 'suitableScope',
        'status' => 'status',
        'relatedAgents' => 'relatedAgents',
        'currencyExchange' => 'currencyExchange'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identification' => 'setIdentification',
        'currency' => 'setCurrency',
        'servicer' => 'setServicer',
        'nameI18N' => 'setNameI18N',
        'productI18N' => 'setProductI18N',
        'ownersNames' => 'setOwnersNames',
        'relationship' => 'setRelationship',
        'suitableScope' => 'setSuitableScope',
        'status' => 'setStatus',
        'relatedAgents' => 'setRelatedAgents',
        'currencyExchange' => 'setCurrencyExchange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identification' => 'getIdentification',
        'currency' => 'getCurrency',
        'servicer' => 'getServicer',
        'nameI18N' => 'getNameI18N',
        'productI18N' => 'getProductI18N',
        'ownersNames' => 'getOwnersNames',
        'relationship' => 'getRelationship',
        'suitableScope' => 'getSuitableScope',
        'status' => 'getStatus',
        'relatedAgents' => 'getRelatedAgents',
        'currencyExchange' => 'getCurrencyExchange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_BOOK = 'BOOK';
    public const STATUS_PENDING = 'PENDING';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_BOOK,
            self::STATUS_PENDING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('identification', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('servicer', $data ?? [], null);
        $this->setIfExists('nameI18N', $data ?? [], null);
        $this->setIfExists('productI18N', $data ?? [], null);
        $this->setIfExists('ownersNames', $data ?? [], null);
        $this->setIfExists('relationship', $data ?? [], null);
        $this->setIfExists('suitableScope', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('relatedAgents', $data ?? [], null);
        $this->setIfExists('currencyExchange', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique system ID of the client's account
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return \SpojeNET\CSas\Model\AccountIdentification|null
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param \SpojeNET\CSas\Model\AccountIdentification|null $identification identification
     *
     * @return self
     */
    public function setIdentification($identification)
    {
        if (is_null($identification)) {
            throw new \InvalidArgumentException('non-nullable identification cannot be null');
        }
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency of the account
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets servicer
     *
     * @return \SpojeNET\CSas\Model\AccountServicer|null
     */
    public function getServicer()
    {
        return $this->container['servicer'];
    }

    /**
     * Sets servicer
     *
     * @param \SpojeNET\CSas\Model\AccountServicer|null $servicer servicer
     *
     * @return self
     */
    public function setServicer($servicer)
    {
        if (is_null($servicer)) {
            throw new \InvalidArgumentException('non-nullable servicer cannot be null');
        }
        $this->container['servicer'] = $servicer;

        return $this;
    }

    /**
     * Gets nameI18N
     *
     * @return string|null
     */
    public function getNameI18N()
    {
        return $this->container['nameI18N'];
    }

    /**
     * Sets nameI18N
     *
     * @param string|null $nameI18N Internationalized name of the account
     *
     * @return self
     */
    public function setNameI18N($nameI18N)
    {
        if (is_null($nameI18N)) {
            throw new \InvalidArgumentException('non-nullable nameI18N cannot be null');
        }
        $this->container['nameI18N'] = $nameI18N;

        return $this;
    }

    /**
     * Gets productI18N
     *
     * @return string|null
     */
    public function getProductI18N()
    {
        return $this->container['productI18N'];
    }

    /**
     * Sets productI18N
     *
     * @param string|null $productI18N Internationalized product name
     *
     * @return self
     */
    public function setProductI18N($productI18N)
    {
        if (is_null($productI18N)) {
            throw new \InvalidArgumentException('non-nullable productI18N cannot be null');
        }
        $this->container['productI18N'] = $productI18N;

        return $this;
    }

    /**
     * Gets ownersNames
     *
     * @return string[]|null
     */
    public function getOwnersNames()
    {
        return $this->container['ownersNames'];
    }

    /**
     * Sets ownersNames
     *
     * @param string[]|null $ownersNames List of account owners' names
     *
     * @return self
     */
    public function setOwnersNames($ownersNames)
    {
        if (is_null($ownersNames)) {
            throw new \InvalidArgumentException('non-nullable ownersNames cannot be null');
        }
        $this->container['ownersNames'] = $ownersNames;

        return $this;
    }

    /**
     * Gets relationship
     *
     * @return \SpojeNET\CSas\Model\AccountRelationship|null
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param \SpojeNET\CSas\Model\AccountRelationship|null $relationship relationship
     *
     * @return self
     */
    public function setRelationship($relationship)
    {
        if (is_null($relationship)) {
            throw new \InvalidArgumentException('non-nullable relationship cannot be null');
        }
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets suitableScope
     *
     * @return \SpojeNET\CSas\Model\AccountSuitableScope|null
     */
    public function getSuitableScope()
    {
        return $this->container['suitableScope'];
    }

    /**
     * Sets suitableScope
     *
     * @param \SpojeNET\CSas\Model\AccountSuitableScope|null $suitableScope suitableScope
     *
     * @return self
     */
    public function setSuitableScope($suitableScope)
    {
        if (is_null($suitableScope)) {
            throw new \InvalidArgumentException('non-nullable suitableScope cannot be null');
        }
        $this->container['suitableScope'] = $suitableScope;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the account
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets relatedAgents
     *
     * @return \SpojeNET\CSas\Model\AccountRelatedAgents|null
     */
    public function getRelatedAgents()
    {
        return $this->container['relatedAgents'];
    }

    /**
     * Sets relatedAgents
     *
     * @param \SpojeNET\CSas\Model\AccountRelatedAgents|null $relatedAgents relatedAgents
     *
     * @return self
     */
    public function setRelatedAgents($relatedAgents)
    {
        if (is_null($relatedAgents)) {
            throw new \InvalidArgumentException('non-nullable relatedAgents cannot be null');
        }
        $this->container['relatedAgents'] = $relatedAgents;

        return $this;
    }

    /**
     * Gets currencyExchange
     *
     * @return \SpojeNET\CSas\Model\AccountCurrencyExchange|null
     */
    public function getCurrencyExchange()
    {
        return $this->container['currencyExchange'];
    }

    /**
     * Sets currencyExchange
     *
     * @param \SpojeNET\CSas\Model\AccountCurrencyExchange|null $currencyExchange currencyExchange
     *
     * @return self
     */
    public function setCurrencyExchange($currencyExchange)
    {
        if (is_null($currencyExchange)) {
            throw new \InvalidArgumentException('non-nullable currencyExchange cannot be null');
        }
        $this->container['currencyExchange'] = $currencyExchange;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


