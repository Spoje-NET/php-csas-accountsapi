<?php

declare(strict_types=1);

/**
 * This file is part of the CSasWebApi package
 *
 * https://github.com/Spoje-NET/php-csas-webapi
 *
 * (c) SpojeNetIT <http://spoje.net/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Production Accounts API V3.
 *
 * API for managing production accounts.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vitezslav.dvorak@spojenet.cz
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpojeNET\CSas\Model;

use SpojeNET\CSas\ObjectSerializer;

/**
 * GetTransactions200ResponseTransactionsInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetTransactions200ResponseTransactionsInner implements \ArrayAccess, \JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'getTransactions_200_response_transactions_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'entryReference' => 'string',
        'amount' => '\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerAmount',
        'creditDebitIndicator' => 'string',
        'status' => 'string',
        'bookingDate' => '\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerBookingDate',
        'valueDate' => '\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerValueDate',
        'bankTransactionCode' => '\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerBankTransactionCode',
        'entryDetails' => '\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetails',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'entryReference' => null,
        'amount' => null,
        'creditDebitIndicator' => null,
        'status' => null,
        'bookingDate' => null,
        'valueDate' => null,
        'bankTransactionCode' => null,
        'entryDetails' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'entryReference' => false,
        'amount' => false,
        'creditDebitIndicator' => false,
        'status' => false,
        'bookingDate' => false,
        'valueDate' => false,
        'bankTransactionCode' => false,
        'entryDetails' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'entryReference' => 'entryReference',
        'amount' => 'amount',
        'creditDebitIndicator' => 'creditDebitIndicator',
        'status' => 'status',
        'bookingDate' => 'bookingDate',
        'valueDate' => 'valueDate',
        'bankTransactionCode' => 'bankTransactionCode',
        'entryDetails' => 'entryDetails',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'entryReference' => 'setEntryReference',
        'amount' => 'setAmount',
        'creditDebitIndicator' => 'setCreditDebitIndicator',
        'status' => 'setStatus',
        'bookingDate' => 'setBookingDate',
        'valueDate' => 'setValueDate',
        'bankTransactionCode' => 'setBankTransactionCode',
        'entryDetails' => 'setEntryDetails',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'entryReference' => 'getEntryReference',
        'amount' => 'getAmount',
        'creditDebitIndicator' => 'getCreditDebitIndicator',
        'status' => 'getStatus',
        'bookingDate' => 'getBookingDate',
        'valueDate' => 'getValueDate',
        'bankTransactionCode' => 'getBankTransactionCode',
        'entryDetails' => 'getEntryDetails',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('entryReference', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('creditDebitIndicator', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('bookingDate', $data ?? [], null);
        $this->setIfExists('valueDate', $data ?? [], null);
        $this->setIfExists('bankTransactionCode', $data ?? [], null);
        $this->setIfExists('entryDetails', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            \JSON_PRETTY_PRINT,
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return \in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets entryReference.
     *
     * @return null|string
     */
    public function getEntryReference()
    {
        return $this->container['entryReference'];
    }

    /**
     * Sets entryReference.
     *
     * @param null|string $entryReference Unique transaction reference
     *
     * @return self
     */
    public function setEntryReference($entryReference)
    {
        if (null === $entryReference) {
            throw new \InvalidArgumentException('non-nullable entryReference cannot be null');
        }

        $this->container['entryReference'] = $entryReference;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return null|\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerAmount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param null|\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerAmount $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (null === $amount) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets creditDebitIndicator.
     *
     * @return null|string
     */
    public function getCreditDebitIndicator()
    {
        return $this->container['creditDebitIndicator'];
    }

    /**
     * Sets creditDebitIndicator.
     *
     * @param null|string $creditDebitIndicator Indicates if the transaction is a credit or debit
     *
     * @return self
     */
    public function setCreditDebitIndicator($creditDebitIndicator)
    {
        if (null === $creditDebitIndicator) {
            throw new \InvalidArgumentException('non-nullable creditDebitIndicator cannot be null');
        }

        $this->container['creditDebitIndicator'] = $creditDebitIndicator;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return null|string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param null|string $status Status of the transaction
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (null === $status) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets bookingDate.
     *
     * @return null|\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerBookingDate
     */
    public function getBookingDate()
    {
        return $this->container['bookingDate'];
    }

    /**
     * Sets bookingDate.
     *
     * @param null|\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerBookingDate $bookingDate bookingDate
     *
     * @return self
     */
    public function setBookingDate($bookingDate)
    {
        if (null === $bookingDate) {
            throw new \InvalidArgumentException('non-nullable bookingDate cannot be null');
        }

        $this->container['bookingDate'] = $bookingDate;

        return $this;
    }

    /**
     * Gets valueDate.
     *
     * @return null|\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerValueDate
     */
    public function getValueDate()
    {
        return $this->container['valueDate'];
    }

    /**
     * Sets valueDate.
     *
     * @param null|\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerValueDate $valueDate valueDate
     *
     * @return self
     */
    public function setValueDate($valueDate)
    {
        if (null === $valueDate) {
            throw new \InvalidArgumentException('non-nullable valueDate cannot be null');
        }

        $this->container['valueDate'] = $valueDate;

        return $this;
    }

    /**
     * Gets bankTransactionCode.
     *
     * @return null|\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerBankTransactionCode
     */
    public function getBankTransactionCode()
    {
        return $this->container['bankTransactionCode'];
    }

    /**
     * Sets bankTransactionCode.
     *
     * @param null|\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerBankTransactionCode $bankTransactionCode bankTransactionCode
     *
     * @return self
     */
    public function setBankTransactionCode($bankTransactionCode)
    {
        if (null === $bankTransactionCode) {
            throw new \InvalidArgumentException('non-nullable bankTransactionCode cannot be null');
        }

        $this->container['bankTransactionCode'] = $bankTransactionCode;

        return $this;
    }

    /**
     * Gets entryDetails.
     *
     * @return null|\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetails
     */
    public function getEntryDetails()
    {
        return $this->container['entryDetails'];
    }

    /**
     * Sets entryDetails.
     *
     * @param null|\SpojeNET\CSas\Model\GetTransactions200ResponseTransactionsInnerEntryDetails $entryDetails entryDetails
     *
     * @return self
     */
    public function setEntryDetails($entryDetails)
    {
        if (null === $entryDetails) {
            throw new \InvalidArgumentException('non-nullable entryDetails cannot be null');
        }

        $this->container['entryDetails'] = $entryDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && \array_key_exists($variableName, $fields) && null === $fields[$variableName]) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
