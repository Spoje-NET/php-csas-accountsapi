<?php

declare(strict_types=1);

/**
 * This file is part of the CSasWebApi package
 *
 * https://github.com/Spoje-NET/php-csas-webapi
 *
 * (c) SpojeNetIT <http://spoje.net/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Production Accounts API V3.
 *
 * API for managing production accounts.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vitezslav.dvorak@spojenet.cz
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpojeNet\CSas\Accounts;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SpojeNet\CSas\ApiClient;
use SpojeNet\CSas\ApiException;
use SpojeNet\CSas\Configuration;
use SpojeNet\CSas\HeaderSelector;
use SpojeNet\CSas\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var string[] *
     */
    public const contentTypes = [
        'downloadAccountStatement' => [
            'application/json',
        ],
        'getAccountBalance' => [
            'application/json',
        ],
        'getAccountStatements' => [
            'application/json',
        ],
        'getAccounts' => [
            'application/json',
        ],
        'getTransactions' => [
            'application/json',
        ],
    ];

    protected ClientInterface $client;

    protected Configuration $config;

    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /**
     * ApiKey obtained from Developer Portal - when you registered your app with us.
     *
     * @see https://developers.erstegroup.com/portal/organizations/vitezslav-dvorak/applications/ Grab Your API key here
     */
    protected string $apiKey;
    protected string $token;

    /**
     * Use the /api/csas/public/sandbox/v3/* path for endpoints ?
     */
    protected $sandBoxMode = false;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        $hostIndex = 0,
    ) {
        $this->client = $client ?: new ApiClient();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;

        if (method_exists($this->client, 'getApiKey')) {
            $config['headers']['WEB-API-key'] = $this->client->getApiKey();
            $this->setApiKey($this->client->getApiKey());
        }

        if (method_exists($this->client, 'getAccessToken')) {
            $config['headers']['authorization'] = 'Bearer '.$this->client->getAccessToken();
            $this->setAccessToken($this->client->getAccessToken());
        }

        if (method_exists($this->client, 'getSandBoxMode')) {
            $this->setSandBoxMode($this->client->getSandBoxMode());
        }

        $config['base_uri'] = ($this->sandBoxMode ? 'https://webapi.developers.erstegroup.com/api/csas/public/sandbox' : 'https://www.csas.cz/webapi/api').'/v3/accounts/';
    }

    /**
     * @param string $apiKey Set you API_KEY here
     */
    public function setApiKey(string $apiKey): void
    {
        $this->config->setApiKey('WEB-API-key', $apiKey);
    }

    /**
     * @param string $token set access token
     */
    public function setAccessToken($token): void
    {
        $this->config->setAccessToken($token);
    }

    /**
     * @param bool $sandboxing Use mocking api for development purposes ?
     */
    public function setSandBoxMode(bool $sandboxing): void
    {
        $this->sandBoxMode = $sandboxing;
        $this->config->setHost('https://'.($this->sandBoxMode ? 'webapi.developers.erstegroup.com' : 'www.csas.cz'));
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation downloadAccountStatement.
     *
     * Download account statement
     *
     * @param string $id                 Unique system identification of the client account (required)
     * @param string $accountStatementId Unique identifier of the account statement (required)
     * @param string $format             Selected statement format (required)
     * @param string $contentType        The value for the Content-Type header. Check self::contentTypes['downloadAccountStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws \SpojeNet\CSas\ApiException on non-2xx response or if the response body is not in the expected format
     *
     * @return \SplFileObject|\SpojeNet\CSas\Model\GetAccounts403Response
     */
    public function downloadAccountStatement($id, $accountStatementId, $format, string $contentType = self::contentTypes['downloadAccountStatement'][0])
    {
        [$response] = $this->downloadAccountStatementWithHttpInfo($id, $accountStatementId, $format, $contentType);

        return $response;
    }

    /**
     * Operation downloadAccountStatementWithHttpInfo.
     *
     * Download account statement
     *
     * @param string $id                 Unique system identification of the client account (required)
     * @param string $accountStatementId Unique identifier of the account statement (required)
     * @param string $format             Selected statement format (required)
     * @param string $contentType        The value for the Content-Type header. Check self::contentTypes['downloadAccountStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws \SpojeNet\CSas\ApiException on non-2xx response or if the response body is not in the expected format
     *
     * @return array of \SplFileObject|\SpojeNet\CSas\Model\GetAccounts403Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadAccountStatementWithHttpInfo($id, $accountStatementId, $format, string $contentType = self::contentTypes['downloadAccountStatement'][0])
    {
        $request = $this->downloadAccountStatementRequest($id, $accountStatementId, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\SpojeNet\CSas\Model\GetAccounts403Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccounts403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccounts403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            $returnType = '\SplFileObject';

            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();

                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri(),
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content,
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccounts403Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation downloadAccountStatementAsync.
     *
     * Download account statement
     *
     * @param string $id                 Unique system identification of the client account (required)
     * @param string $accountStatementId Unique identifier of the account statement (required)
     * @param string $format             Selected statement format (required)
     * @param string $contentType        The value for the Content-Type header. Check self::contentTypes['downloadAccountStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAccountStatementAsync($id, $accountStatementId, $format, string $contentType = self::contentTypes['downloadAccountStatement'][0])
    {
        return $this->downloadAccountStatementAsyncWithHttpInfo($id, $accountStatementId, $format, $contentType)
            ->then(
                static function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation downloadAccountStatementAsyncWithHttpInfo.
     *
     * Download account statement
     *
     * @param string $id                 Unique system identification of the client account (required)
     * @param string $accountStatementId Unique identifier of the account statement (required)
     * @param string $format             Selected statement format (required)
     * @param string $contentType        The value for the Content-Type header. Check self::contentTypes['downloadAccountStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAccountStatementAsyncWithHttpInfo($id, $accountStatementId, $format, string $contentType = self::contentTypes['downloadAccountStatement'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->downloadAccountStatementRequest($id, $accountStatementId, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                static function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                static function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'downloadAccountStatement'.
     *
     * @param string $id                 Unique system identification of the client account (required)
     * @param string $accountStatementId Unique identifier of the account statement (required)
     * @param string $format             Selected statement format (required)
     * @param string $contentType        The value for the Content-Type header. Check self::contentTypes['downloadAccountStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadAccountStatementRequest($id, $accountStatementId, $format, string $contentType = self::contentTypes['downloadAccountStatement'][0])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (\is_array($id) && \count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling downloadAccountStatement',
            );
        }

        // verify the required parameter 'accountStatementId' is set
        if ($accountStatementId === null || (\is_array($accountStatementId) && \count($accountStatementId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountStatementId when calling downloadAccountStatement',
            );
        }

        // verify the required parameter 'format' is set
        if ($format === null || (\is_array($format) && \count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling downloadAccountStatement',
            );
        }

        $resourcePath = ($this->sandBoxMode ? '/api/csas/public/sandbox' : '/webapi/api').'/v3/accounts/my/accounts/{id}/statements/{accountStatementId}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true, // required
        ) ?? []);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{id}',
                ObjectSerializer::toPathValue($id),
                $resourcePath,
            );
        }

        // path params
        if ($accountStatementId !== null) {
            $resourcePath = str_replace(
                '{accountStatementId}',
                ObjectSerializer::toPathValue($accountStatementId),
                $resourcePath,
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/xml', 'text/csv', 'application/json'],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (str_contains(strtolower($headers['Content-Type']), strtolower('application/json'))) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('WEB-API-key');

        if ($apiKey !== null) {
            $headers['WEB-API-key'] = $apiKey;
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];

        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getAccountBalance.
     *
     * Get account balance
     *
     * @param string $id          The ID of the account (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws \SpojeNet\CSas\ApiException on non-2xx response or if the response body is not in the expected format
     *
     * @return \SpojeNet\CSas\Model\GetAccountBalance200Response|\SpojeNet\CSas\Model\GetAccounts403Response
     */
    public function getAccountBalance($id, string $contentType = self::contentTypes['getAccountBalance'][0])
    {
        [$response] = $this->getAccountBalanceWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation getAccountBalanceWithHttpInfo.
     *
     * Get account balance
     *
     * @param string $id          The ID of the account (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws \SpojeNet\CSas\ApiException on non-2xx response or if the response body is not in the expected format
     *
     * @return array of \SpojeNet\CSas\Model\GetAccountBalance200Response|\SpojeNet\CSas\Model\GetAccounts403Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountBalanceWithHttpInfo($id, string $contentType = self::contentTypes['getAccountBalance'][0])
    {
        $request = $this->getAccountBalanceRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    if ('\SpojeNet\CSas\Model\GetAccountBalance200Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccountBalance200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccountBalance200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\SpojeNet\CSas\Model\GetAccounts403Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccounts403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccounts403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            $returnType = '\SpojeNet\CSas\Model\GetAccountBalance200Response';

            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();

                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri(),
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content,
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccountBalance200Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccounts403Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAccountBalanceAsync.
     *
     * Get account balance
     *
     * @param string $id          The ID of the account (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBalanceAsync($id, string $contentType = self::contentTypes['getAccountBalance'][0])
    {
        return $this->getAccountBalanceAsyncWithHttpInfo($id, $contentType)
            ->then(
                static function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getAccountBalanceAsyncWithHttpInfo.
     *
     * Get account balance
     *
     * @param string $id          The ID of the account (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBalanceAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getAccountBalance'][0])
    {
        $returnType = '\SpojeNet\CSas\Model\GetAccountBalance200Response';
        $request = $this->getAccountBalanceRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                static function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                static function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getAccountBalance'.
     *
     * @param string $id          The ID of the account (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountBalanceRequest($id, string $contentType = self::contentTypes['getAccountBalance'][0])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (\is_array($id) && \count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAccountBalance',
            );
        }

        $resourcePath = ($this->sandBoxMode ? '/api/csas/public/sandbox' : '/webapi/api').'/v3/accounts/my/accounts/{id}/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{id}',
                ObjectSerializer::toPathValue($id),
                $resourcePath,
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (str_contains(strtolower($headers['Content-Type']), strtolower('application/json'))) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('WEB-API-key');

        if ($apiKey !== null) {
            $headers['WEB-API-key'] = $apiKey;
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];

        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getAccountStatements.
     *
     * Get account statements
     *
     * @param string    $id          Unique system identification of the client account (required)
     * @param \DateTime $fromDate    Date from which the statement history should be obtained (optional)
     * @param \DateTime $toDate      Date to which the statement history should be obtained (including this moment in time) (optional)
     * @param string    $format      Selected statement format (optional)
     * @param int       $size        Pagination - Number of entries per page (max. 100) (optional)
     * @param int       $page        Pagination - The desired page (indexed from zero) (optional)
     * @param string    $contentType The value for the Content-Type header. Check self::contentTypes['getAccountStatements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws \SpojeNet\CSas\ApiException on non-2xx response or if the response body is not in the expected format
     *
     * @return \SpojeNet\CSas\Model\GetAccounts403Response|\SpojeNet\CSas\Model\GetAccountStatements200Response|\SpojeNet\CSas\Model\GetAccountStatements400Response|\SpojeNet\CSas\Model\GetAccountStatements404Response|\SpojeNet\CSas\Model\GetAccountStatements429Response|\SpojeNet\CSas\Model\GetAccountStatements500Response|\SpojeNet\CSas\Model\GetAccountStatements503Response
     */
    public function getAccountStatements($id, $fromDate = null, $toDate = null, $format = null, $size = null, $page = null, string $contentType = self::contentTypes['getAccountStatements'][0])
    {
        [$response] = $this->getAccountStatementsWithHttpInfo($id, $fromDate, $toDate, $format, $size, $page, $contentType);

        return $response;
    }

    /**
     * Operation getAccountStatementsWithHttpInfo.
     *
     * Get account statements
     *
     * @param string    $id          Unique system identification of the client account (required)
     * @param \DateTime $fromDate    Date from which the statement history should be obtained (optional)
     * @param \DateTime $toDate      Date to which the statement history should be obtained (including this moment in time) (optional)
     * @param string    $format      Selected statement format (optional)
     * @param int       $size        Pagination - Number of entries per page (max. 100) (optional)
     * @param int       $page        Pagination - The desired page (indexed from zero) (optional)
     * @param string    $contentType The value for the Content-Type header. Check self::contentTypes['getAccountStatements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws \SpojeNet\CSas\ApiException on non-2xx response or if the response body is not in the expected format
     *
     * @return array of \SpojeNet\CSas\Model\GetAccountStatements200Response|\SpojeNet\CSas\Model\GetAccountStatements400Response|\SpojeNet\CSas\Model\GetAccounts403Response|\SpojeNet\CSas\Model\GetAccountStatements404Response|\SpojeNet\CSas\Model\GetAccountStatements429Response|\SpojeNet\CSas\Model\GetAccountStatements500Response|\SpojeNet\CSas\Model\GetAccountStatements503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountStatementsWithHttpInfo($id, $fromDate = null, $toDate = null, $format = null, $size = null, $page = null, string $contentType = self::contentTypes['getAccountStatements'][0])
    {
        $request = $this->getAccountStatementsRequest($id, $fromDate, $toDate, $format, $size, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    if ('\SpojeNet\CSas\Model\GetAccountStatements200Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccountStatements200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccountStatements200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\SpojeNet\CSas\Model\GetAccountStatements400Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccountStatements400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccountStatements400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\SpojeNet\CSas\Model\GetAccounts403Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccounts403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccounts403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\SpojeNet\CSas\Model\GetAccountStatements404Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccountStatements404Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccountStatements404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\SpojeNet\CSas\Model\GetAccountStatements429Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccountStatements429Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccountStatements429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\SpojeNet\CSas\Model\GetAccountStatements500Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccountStatements500Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccountStatements500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\SpojeNet\CSas\Model\GetAccountStatements503Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccountStatements503Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccountStatements503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            $returnType = '\SpojeNet\CSas\Model\GetAccountStatements200Response';

            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();

                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri(),
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content,
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccountStatements200Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccountStatements400Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccounts403Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccountStatements404Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccountStatements429Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccountStatements500Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccountStatements503Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAccountStatementsAsync.
     *
     * Get account statements
     *
     * @param string    $id          Unique system identification of the client account (required)
     * @param \DateTime $fromDate    Date from which the statement history should be obtained (optional)
     * @param \DateTime $toDate      Date to which the statement history should be obtained (including this moment in time) (optional)
     * @param string    $format      Selected statement format (optional)
     * @param int       $size        Pagination - Number of entries per page (max. 100) (optional)
     * @param int       $page        Pagination - The desired page (indexed from zero) (optional)
     * @param string    $contentType The value for the Content-Type header. Check self::contentTypes['getAccountStatements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountStatementsAsync($id, $fromDate = null, $toDate = null, $format = null, $size = null, $page = null, string $contentType = self::contentTypes['getAccountStatements'][0])
    {
        return $this->getAccountStatementsAsyncWithHttpInfo($id, $fromDate, $toDate, $format, $size, $page, $contentType)
            ->then(
                static function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getAccountStatementsAsyncWithHttpInfo.
     *
     * Get account statements
     *
     * @param string    $id          Unique system identification of the client account (required)
     * @param \DateTime $fromDate    Date from which the statement history should be obtained (optional)
     * @param \DateTime $toDate      Date to which the statement history should be obtained (including this moment in time) (optional)
     * @param string    $format      Selected statement format (optional)
     * @param int       $size        Pagination - Number of entries per page (max. 100) (optional)
     * @param int       $page        Pagination - The desired page (indexed from zero) (optional)
     * @param string    $contentType The value for the Content-Type header. Check self::contentTypes['getAccountStatements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountStatementsAsyncWithHttpInfo($id, $fromDate = null, $toDate = null, $format = null, $size = null, $page = null, string $contentType = self::contentTypes['getAccountStatements'][0])
    {
        $returnType = '\SpojeNet\CSas\Model\GetAccountStatements200Response';
        $request = $this->getAccountStatementsRequest($id, $fromDate, $toDate, $format, $size, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                static function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                static function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getAccountStatements'.
     *
     * @param string    $id          Unique system identification of the client account (required)
     * @param \DateTime $fromDate    Date from which the statement history should be obtained (optional)
     * @param \DateTime $toDate      Date to which the statement history should be obtained (including this moment in time) (optional)
     * @param string    $format      Selected statement format (optional)
     * @param int       $size        Pagination - Number of entries per page (max. 100) (optional)
     * @param int       $page        Pagination - The desired page (indexed from zero) (optional)
     * @param string    $contentType The value for the Content-Type header. Check self::contentTypes['getAccountStatements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountStatementsRequest($id, $fromDate = null, $toDate = null, $format = null, $size = null, $page = null, string $contentType = self::contentTypes['getAccountStatements'][0])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (\is_array($id) && \count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAccountStatements',
            );
        }

        $resourcePath = ($this->sandBoxMode ? '/api/csas/public/sandbox' : '/webapi/api').'/v3/accounts/my/accounts/{id}/statements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDate,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toDate,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{id}',
                ObjectSerializer::toPathValue($id),
                $resourcePath,
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (str_contains(strtolower($headers['Content-Type']), strtolower('application/json'))) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('WEB-API-key');

        if ($apiKey !== null) {
            $headers['WEB-API-key'] = $apiKey;
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];

        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getAccounts.
     *
     * Get account details
     *
     * @param int    $size        Number of accounts to return (optional)
     * @param int    $page        Page number to return (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws \SpojeNet\CSas\ApiException on non-2xx response or if the response body is not in the expected format
     *
     * @return \SpojeNet\CSas\Model\GetAccounts200Response|\SpojeNet\CSas\Model\GetAccounts403Response
     */
    public function getAccounts($size = null, $page = null, string $contentType = self::contentTypes['getAccounts'][0])
    {
        [$response] = $this->getAccountsWithHttpInfo($size, $page, $contentType);

        return $response;
    }

    /**
     * Operation getAccountsWithHttpInfo.
     *
     * Get account details
     *
     * @param int    $size        Number of accounts to return (optional)
     * @param int    $page        Page number to return (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws \SpojeNet\CSas\ApiException on non-2xx response or if the response body is not in the expected format
     *
     * @return array of \SpojeNet\CSas\Model\GetAccounts200Response|\SpojeNet\CSas\Model\GetAccounts403Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountsWithHttpInfo($size = null, $page = null, string $contentType = self::contentTypes['getAccounts'][0])
    {
        $request = $this->getAccountsRequest($size, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    if ('\SpojeNet\CSas\Model\GetAccounts200Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccounts200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccounts200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\SpojeNet\CSas\Model\GetAccounts403Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccounts403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccounts403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            $returnType = '\SpojeNet\CSas\Model\GetAccounts200Response';

            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();

                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri(),
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content,
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccounts200Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccounts403Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAccountsAsync.
     *
     * Get account details
     *
     * @param int    $size        Number of accounts to return (optional)
     * @param int    $page        Page number to return (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountsAsync($size = null, $page = null, string $contentType = self::contentTypes['getAccounts'][0])
    {
        return $this->getAccountsAsyncWithHttpInfo($size, $page, $contentType)
            ->then(
                static function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getAccountsAsyncWithHttpInfo.
     *
     * Get account details
     *
     * @param int    $size        Number of accounts to return (optional)
     * @param int    $page        Page number to return (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountsAsyncWithHttpInfo($size = null, $page = null, string $contentType = self::contentTypes['getAccounts'][0])
    {
        $returnType = '\SpojeNet\CSas\Model\GetAccounts200Response';
        $request = $this->getAccountsRequest($size, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                static function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                static function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getAccounts'.
     *
     * @param int    $size        Number of accounts to return (optional)
     * @param int    $page        Page number to return (optional)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountsRequest($size = null, $page = null, string $contentType = self::contentTypes['getAccounts'][0])
    {
        $resourcePath = ($this->sandBoxMode ? '/api/csas/public/sandbox' : '/webapi/api').'/v3/accounts/my/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (str_contains(strtolower($headers['Content-Type']), strtolower('application/json'))) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('WEB-API-key');

        if ($apiKey !== null) {
            $headers['WEB-API-key'] = $apiKey;
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];

        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getTransactions.
     *
     * Overview of transactions
     *
     * @param string    $id          Unique system identification of the client account (required)
     * @param \DateTime $fromDate    Start date for filtering transactions (optional)
     * @param \DateTime $toDate      End date for filtering transactions (optional)
     * @param string    $contentType The value for the Content-Type header. Check self::contentTypes['getTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws \SpojeNet\CSas\ApiException on non-2xx response or if the response body is not in the expected format
     *
     * @return \SpojeNet\CSas\Model\GetAccounts403Response|\SpojeNet\CSas\Model\GetTransactions200Response
     */
    public function getTransactions($id, $fromDate = null, $toDate = null, string $contentType = self::contentTypes['getTransactions'][0])
    {
        [$response] = $this->getTransactionsWithHttpInfo($id, $fromDate, $toDate, $contentType);

        return $response;
    }

    /**
     * Operation getTransactionsWithHttpInfo.
     *
     * Overview of transactions
     *
     * @param string    $id          Unique system identification of the client account (required)
     * @param \DateTime $fromDate    Start date for filtering transactions (optional)
     * @param \DateTime $toDate      End date for filtering transactions (optional)
     * @param string    $contentType The value for the Content-Type header. Check self::contentTypes['getTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws \SpojeNet\CSas\ApiException on non-2xx response or if the response body is not in the expected format
     *
     * @return array of \SpojeNet\CSas\Model\GetTransactions200Response|\SpojeNet\CSas\Model\GetAccounts403Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsWithHttpInfo($id, $fromDate = null, $toDate = null, string $contentType = self::contentTypes['getTransactions'][0])
    {
        $request = $this->getTransactionsRequest($id, $fromDate, $toDate, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    if ('\SpojeNet\CSas\Model\GetTransactions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetTransactions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetTransactions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\SpojeNet\CSas\Model\GetAccounts403Response' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ('\SpojeNet\CSas\Model\GetAccounts403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content,
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpojeNet\CSas\Model\GetAccounts403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            $returnType = '\SpojeNet\CSas\Model\GetTransactions200Response';

            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();

                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri(),
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content,
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetTransactions200Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpojeNet\CSas\Model\GetAccounts403Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTransactionsAsync.
     *
     * Overview of transactions
     *
     * @param string    $id          Unique system identification of the client account (required)
     * @param \DateTime $fromDate    Start date for filtering transactions (optional)
     * @param \DateTime $toDate      End date for filtering transactions (optional)
     * @param string    $contentType The value for the Content-Type header. Check self::contentTypes['getTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsAsync($id, $fromDate = null, $toDate = null, string $contentType = self::contentTypes['getTransactions'][0])
    {
        return $this->getTransactionsAsyncWithHttpInfo($id, $fromDate, $toDate, $contentType)
            ->then(
                static function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getTransactionsAsyncWithHttpInfo.
     *
     * Overview of transactions
     *
     * @param string    $id          Unique system identification of the client account (required)
     * @param \DateTime $fromDate    Start date for filtering transactions (optional)
     * @param \DateTime $toDate      End date for filtering transactions (optional)
     * @param string    $contentType The value for the Content-Type header. Check self::contentTypes['getTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsAsyncWithHttpInfo($id, $fromDate = null, $toDate = null, string $contentType = self::contentTypes['getTransactions'][0])
    {
        $returnType = '\SpojeNet\CSas\Model\GetTransactions200Response';
        $request = $this->getTransactionsRequest($id, $fromDate, $toDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                static function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();

                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                static function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getTransactions'.
     *
     * @param string    $id          Unique system identification of the client account (required)
     * @param \DateTime $fromDate    Start date for filtering transactions (optional)
     * @param \DateTime $toDate      End date for filtering transactions (optional)
     * @param string    $contentType The value for the Content-Type header. Check self::contentTypes['getTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsRequest($id, $fromDate = null, $toDate = null, string $contentType = self::contentTypes['getTransactions'][0])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (\is_array($id) && \count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTransactions',
            );
        }

        $resourcePath = ($this->sandBoxMode ? '/api/csas/public/sandbox' : '/webapi/api').'/v3/accounts/my/accounts/{id}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDate,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toDate,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{id}',
                ObjectSerializer::toPathValue($id),
                $resourcePath,
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (str_contains(strtolower($headers['Content-Type']), strtolower('application/json'))) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('WEB-API-key');

        if ($apiKey !== null) {
            $headers['WEB-API-key'] = $apiKey;
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];

        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Create http client option.
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];

        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'ab');

            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        $options['headers']['WEB-API-key'] = $this->config->getApiKey('WEB-API-key');
        $options['headers']['authorization'] = 'Bearer '.$this->config->getAccessToken();

        return $options;
    }
}
