<?php

declare(strict_types=1);

/**
 * This file is part of the CSasWebApi package
 *
 * https://github.com/Spoje-NET/php-csas-webapi
 *
 * (c) SpojeNetIT <http://spoje.net/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace SpojeNet\CSas;

/**
 * Description of Statementor.
 *
 * @author vitex
 *
 * @no-named-arguments
 */
class Statementor extends \Ease\Sand
{
    use \Ease\Logger\Logging;
    use \Ease\datescope;
    
    public \DateTime $since;
    public \DateTime $until;
    public string $currency = 'CZK';

    /**
     * DateTime Formating eg. 2021-08-01T10:00:00.0Z.
     */
    public static string $dateTimeFormat = 'Y-m-d\\TH:i:s.0\\Z';

    /**
     * DateTime Formating eg. 2021-08-01T10:00:00.0Z.
     */
    public static string $dateFormat = 'Y-m-d';
    private string $scope;
    private string $accountNumber = '';
    private string $accountUuid = '';

    public function __construct(string $accountUuid, string $accountNumber = '', string $scope = '')
    {
        $this->setAccountUuid($accountUuid);

        if ($accountNumber) {
            $this->setAccountNumber($accountNumber);
        }

        if ($scope) {
            $this->setScope($scope);
        }
    }

    /**
     * Set AccountNumber for further operations.
     *
     * @param string $accountNumber
     *
     * @return Statementor
     */
    public function setAccountNumber($accountNumber)
    {
        $this->accountNumber = $accountNumber;
        $this->setObjectName($accountNumber.'@'.\get_class($this));

        return $this;
    }

    /**
     * Obtain Statements from ÄŒSas.
     *
     * @param string $format pdf, xml, xml-data, abo-standard, abo-internal, abo-standard-extended, abo-internal-extended, csv-comma, csv-semicolon, mt940
     */
    public function getStatements($format = 'pdf'): array
    {
        $apiInstance = new \SpojeNet\CSas\Accounts\DefaultApi();
        $page = 0;
        $statements = [];
        $this->addStatusMessage(sprintf(_('Request %s statements from %s to %s'), $format, $this->since->format(self::$dateFormat), $this->until->format(self::$dateFormat)), 'debug');

        try {
            do {
                $result = $apiInstance->getAccountStatements($this->getAccountUuid(), $this->getSince()->format('Y-m-d'), $this->getUntil()->format('Y-m-d'), $format);

                if ($result->getAccountStatements()) {
                    $statements = array_merge($statements, $result->getAccountStatements());
                } else {
                    $this->addStatusMessage(sprintf(_('No transactions from %s to %s'), $this->since->format(self::$dateFormat), $this->until->format(self::$dateFormat)));
                }
            } while ($result->getNextPage());
        } catch (\Ease\Exception $e) {
            echo 'Exception when calling GetTransactionListApi->getTransactionList: ', $e->getMessage(), \PHP_EOL;
        }

        return $statements;
    }




    public function getScopeSymbolic(): string
    {
        return $this->scope;
    }

    public function getScope(): \DatePeriod
    {
        return new \DatePeriod($this->since, new \DateInterval('P1D'), $this->until);
    }

    /**
     * Save Statement PDF files.
     *
     * @param array<mixed> $statements - produced by getStatements() function
     * @param string       $format     pdf|xml
     */
    public function download(string $saveTo, array $statements, string $format = 'pdf', string $currencyCode = 'CZK'): array
    {
        $saved = [];
        $apiInstance = new \SpojeNet\CSas\Accounts\DefaultApi();
        $success = 0;

        foreach ($statements as $statement) {
            //        'accountStatementId' => 'getAccountStatementId',
            //        'year' => 'getYear',
            //        'month' => 'getMonth',
            //        'sequenceNumber' => 'getSequenceNumber',
            //        'period' => 'getPeriod',
            //        'dateFrom' => 'getDateFrom',
            //        'dateTo' => 'getDateTo',
            //        'formats' => 'getFormats',

            $statementFilename =
                    $statement->getSequenceNumber().'_'.
                    $this->getAccountNumber().'_'.
                    $statement->getAccountStatementId().'_'.
                    $this->currency.'_'.$statement->getDateFrom()->format('Y-m-d').'.'.$format;

            $pdfStatementRaw = $apiInstance->downloadAccountStatement($this->getAccountUuid(), $statement->getAccountStatementId(), $format);

            if (file_put_contents($saveTo.'/'.$statementFilename, $pdfStatementRaw->fread($pdfStatementRaw->getSize()))) {
                $saved[$statementFilename] = $saveTo.'/'.$statementFilename;
                $this->addStatusMessage($statementFilename.' saved', 'success');
                unset($pdfStatementRaw);
                ++$success;
            }
        }

        $this->addStatusMessage('Download done. '.$success.' of '.\count($statements).' saved');

        return $saved;
    }

    public function getAccountNumber(): string
    {
        return $this->accountNumber;
    }

    public function setAccountUuid($accountUuid): void
    {
        $this->accountUuid = $accountUuid;
    }

    public function getAccountUuid(): string
    {
        return $this->accountUuid;
    }

    /**
     * IBAN=>UUID listing of accounts.
     *
     * @return array<string, string>
     */
    public static function getAccountIDs(Accounts\DefaultApi $apiInstance): array
    {
        $accounts = [];
        $accountsRaw = $apiInstance->getAccounts()->getAccounts();

        if (isset($accountsRaw) && \is_array($accountsRaw)) {
            foreach ($accountsRaw as $account) {
                $accounts[$account->getIdentification()->getIban()] = $account->getId();
            }
        }

        return $accounts;
    }

    // Helper function to map IBAN to account ID
    public static function getAccountIdByIban(Accounts\DefaultApi $apiInstance, string $iban): ?string
    {
        $accountsRaw = $apiInstance->getAccounts()->getAccounts();
        $accId = null;

        if (isset($accountsRaw) && \is_array($accountsRaw)) {
            foreach ($accountsRaw as $account) {
                if ($account->getIdentification()->getIban() === $iban) {
                    $accId = $account->getId();

                    break;
                }
            }
        }

        return $accId;
    }

    public static function getAccountByIban(Accounts\DefaultApi $apiInstance, string $iban): ?\SpojeNet\CSas\Model\Account
    {
        $accountsRaw = $apiInstance->getAccounts()->getAccounts();
        $account = null;

        if (isset($accountsRaw) && \is_array($accountsRaw)) {
            foreach ($accountsRaw as $account) {
                if ($account->getIdentification()->getIban() === $iban) {
                    break;
                }
            }
        }

        return $account;
    }

    public static function getAccountById(Accounts\DefaultApi $apiInstance, string $uuid): ?\SpojeNet\CSas\Model\Account
    {
        $accountsRaw = $apiInstance->getAccounts()->getAccounts();
        $account = null;

        if (isset($accountsRaw) && \is_array($accountsRaw)) {
            foreach ($accountsRaw as $account) {
                if ($account->getId() === $uuid) {
                    break;
                }
            }
        }

        return $account;
    }

}
